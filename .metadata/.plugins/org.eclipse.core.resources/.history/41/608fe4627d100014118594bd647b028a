class Marker {
	private int x;
	private int y;

	Marker(int line) {
		x = -1;
		y = line - 1;
	}

	void moveLeft() {
		y--;
	}

	void moveRight() {
		y++;
	}

	void moveDown() {
		x++;
	}

	int getXPosition() {
		return x;
	}

	int getYPosition() {
		return y;
	}

	boolean check() {

		return true;
	}

}

class Mover {

	Marker marker;

	Mover(int line) {
		marker = new Marker(line);
	}

	int checkLadderLinePos(int[][] ladder) {
		if (marker.getYPosition() == 0)
		{
			return 1;
		} else if (marker.getYPosition() == ladder[0].length - 1) 
		{
			return -1;
		}
		return 0;
	}

	boolean checkRight(int[][] ladder) {
		if (ladder[marker.getXPosition() + 1][marker.getYPosition()] == 1)
			return true;
		return false;
	}

	boolean checkLeft(int[][] ladder) {
		if (ladder[marker.getXPosition() + 1][marker.getYPosition() - 1] == 1)
			return true;
		return false;
	}

	void moving(int[][] ladder) {
		int linePos = checkLadderLinePos(ladder);
		if (linePos == 1) {
			if (checkRight(ladder))
				marker.moveRight();
		} else if (linePos == -1) {
			if (checkLeft(ladder))
				marker.moveLeft();
		} else {
			if (checkLeft(ladder)) {
				marker.moveLeft();
			} else if (checkRight(ladder)) {
				marker.moveRight();
			}
		}
		marker.moveDown();
	}

}

public class Ladder {

	int[][] ladder;

	Ladder() {
		ladder = new int[4][3];
		ladder[0][0] = 1;
		ladder[1][1] = 1;
		ladder[2][0] = 1;
		ladder[3][1] = 1;
	}

	void rideLadder(int line) {
		Mover mover = new Mover(line);

		for (int i = 0; i < ladder.length; i++) {
			mover.moving(ladder);
		}

		int result = mover.marker.getYPosition() + 1;
		System.out.println(result);
	}

	public static void main(String[] args) {

		Ladder ladder = new Ladder();
		ladder.rideLadder(1);

	}

}
